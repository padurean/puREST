basePath: /api/v1
definitions:
  controller.ErrResponse:
    properties:
      code:
        description: application-specific error code
        type: integer
      error:
        description: application-level error message, for debugging
        type: string
      status:
        description: user-level status message
        type: string
    type: object
  controller.SignInRequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  controller.SignInResponse:
    properties:
      expiration:
        type: string
      token:
        type: string
      warning:
        type: string
    type: object
  controller.UserRequest:
    properties:
      created:
        type: string
      deleted:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role:
        type: integer
      updated:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  controller.UserResponse:
    properties:
      created:
        type: string
      deleted:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role:
        type: integer
      updated:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  controller.UserUpdateEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controller.UserUpdatePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
info:
  contact: {}
  description: Golang REST API boilerplate with authentication using PASETO tokens, RBAC authorization, PostgreSQL and Swagger for API docs.
  license:
    name: MIT
    url: https://tldrlegal.com/license/mit-license
  title: puREST API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      operationId: UserList
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size (default 20)
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Lists users
      tags:
      - users
    post:
      consumes:
      - application/json
      operationId: UserCreate
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Creates a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      operationId: UserDelete
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204": {}
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Deletes an existing user
      tags:
      - users
    get:
      consumes:
      - application/json
      operationId: UserGet
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Gets an existing user
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: UserUpdate
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: Request body payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Updates an existing user
      tags:
      - users
  /users/email:
    put:
      consumes:
      - application/json
      operationId: UserUpdateEmail
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.UserUpdateEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Updates the email for the currently signed-in user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      operationId: UserGetMe
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Gets the currently signed-in user
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      operationId: UserUpdatePassword
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.UserUpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Updates the password for the currently signed-in user
      tags:
      - users
  /users/sign-in/{usernameOrEmail}:
    post:
      consumes:
      - application/json
      operationId: UserSignIn
      parameters:
      - description: Username or email
        in: path
        name: usernameOrEmail
        required: true
        type: string
      - description: Request body payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SignInResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrResponse'
      summary: Signs-in the specified user
      tags:
      - users
swagger: "2.0"
